// <auto-generated />
using System;
using AirportApplication;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirportApplication.Migrations
{
    [DbContext(typeof(SqLiteContext))]
    [Migration("20220519151735_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-preview.4.22229.2");

            modelBuilder.Entity("AirportApplication.Models.Airport", b =>
                {
                    b.Property<string>("AirportName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArrivalAirport")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartureAirport")
                        .HasColumnType("TEXT");

                    b.HasKey("AirportName");

                    b.HasIndex("ArrivalAirport");

                    b.HasIndex("DepartureAirport");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("AirportApplication.Models.City", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.HasKey("CityName");

                    b.HasIndex("City");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AirportApplication.Models.Country", b =>
                {
                    b.Property<string>("CountryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.HasKey("CountryName");

                    b.HasIndex("Country");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AirportApplication.Models.Flight", b =>
                {
                    b.Property<string>("FlightName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArrivalAirport")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartureAirport")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartureGate")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.HasKey("FlightName");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AirportApplication.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AisleTaken")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CenterTaken")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FlightName")
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatRow")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WindowTaken")
                        .HasColumnType("INTEGER");

                    b.HasKey("SeatId");

                    b.HasIndex("FlightName");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("AirportApplication.Models.Airport", b =>
                {
                    b.HasOne("AirportApplication.Models.Flight", null)
                        .WithMany("ArrivalAirports")
                        .HasForeignKey("ArrivalAirport");

                    b.HasOne("AirportApplication.Models.Flight", null)
                        .WithMany("DepartureAirports")
                        .HasForeignKey("DepartureAirport");
                });

            modelBuilder.Entity("AirportApplication.Models.City", b =>
                {
                    b.HasOne("AirportApplication.Models.Airport", null)
                        .WithMany("Cities")
                        .HasForeignKey("City");
                });

            modelBuilder.Entity("AirportApplication.Models.Country", b =>
                {
                    b.HasOne("AirportApplication.Models.City", null)
                        .WithMany("Countries")
                        .HasForeignKey("Country");
                });

            modelBuilder.Entity("AirportApplication.Models.Seat", b =>
                {
                    b.HasOne("AirportApplication.Models.Flight", null)
                        .WithMany("Seats")
                        .HasForeignKey("FlightName");
                });

            modelBuilder.Entity("AirportApplication.Models.Airport", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("AirportApplication.Models.City", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("AirportApplication.Models.Flight", b =>
                {
                    b.Navigation("ArrivalAirports");

                    b.Navigation("DepartureAirports");

                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
